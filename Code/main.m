%% Variables initialization
clear; close all; clc;

% beam dimensions
beam_width = 0.0305;                         % [m]
beam_thickness = 0.001;                      % [m]
beam_lenght = 0.21;                          % [m]

% piezo dimensions
piezo_width = 0.3;                           % [m]
piezo_thickness = 0.0005;                    % [m]
piezo_lenght = 0.7;                          % [m]

% range of values
wi = [28.163 100 300]./(2*pi);                           % [rad/s]
% k = [0.05 0.1 0.20];          % adim
% R_L = logspace(2,6,200);                     % [Omh]

% F = 1;                                      % [N]
Cpi = 80e-9;                                 % [F]

% csi = [0.01 0.0066]; 
% don't know what we should use it for, since we removed the part of the
% differential equation that contains it

R_L = logspace(3,6,200);
wi_open = [28.786 139.06 414.79]./2*pi;
wi_short = [28.163 138.99 411.36]./2*pi;
csi = [0.0066 0.0066 0.0029];
k = sqrt((wi_open.^2-wi_short.^2)./wi_short.^2);
%% Plots
wi = wi_open;
% figure(1); % R_L vs Power Output 
% the picks represent the optimal load resistance that maximises the
% power output for w and k 

% x-axis: resistance R_L
% y-axis: power generated by the harvester
% curves: combination of w and k 

Z = R_L;
% Preparation for the computation of the max power
power_output_array = zeros(length(k) * length(Z),100);
for i = 1:length(wi)

    % Allocation for results
    power_output = zeros(length(k), length(Z));
    counter = 0;
    % Compute the transfer function and the generated power
    for ki = 1:length(k)
        for ri = 1:length(Z)
            counter = counter+1;
            w = linspace(0,500);
            for j = 1:size(w,2)
                % Compute transfer function and tau
                [tf, tau] = transferFunction(k(ki), wi(3), Z(ri), Cpi, csi(1), w(j));
                
                % Power
                % power_output(ki, ri) = powerValue(tf, Z(ri));
                power_output_array(counter, j) = powerValue(tf, Z(ri));
            end
        end
    end

end

power_output = zeros(size(Z,2),size(w,2));
w = linspace(25,100); % [rad]
Z = logspace(2,6,200);
for i = 1:size(w,2)
    for j = 1:size(Z,2)
        % Compute transfer function and tau
        [tf, tau] = transferFunction(k(3), wi(3), Z(j), Cpi, csi(1), w(i));            
        % Power
        power_output(j, i) = powerValue(tf, Z(j));
    end
end


% 3D plots with power, current and voltage

[W, RL] = meshgrid(w, Z);

% Create 3D surface plot for power
figure;
surf(W, RL, power_output);
xlabel('Frequency (\omega) [rad/s]');
ylabel('Resistance (Z) [\Omega]');
zlabel('Power Output');
title('3D Plot of Power Output');
colorbar;

current = sqrt(power_output'./Z(1,:));
% Create 3D surface plot for current
figure;
surf(W, RL, current');
xlabel('Frequency (\omega) [rad/s]');
ylabel('Resistance (Z) [\Omega]');
zlabel('Current');
title('3D Plot of current Output');
colorbar;

voltage = sqrt(power_output'.*Z(1,:));
% Create 3D surface plot for voltage
figure;
surf(W, RL, voltage');
xlabel('Frequency (\omega) [rad/s]');
ylabel('Resistance (Z) [\Omega]');
zlabel('Voltage');
title('3D Plot of voltage Output');
colorbar;

% TODO
% far variare R e w per le varie combinazioni dei par modali (ki, wi, csi)
% plottare in corrente tensione e potenza vs Z

% meshgrid
